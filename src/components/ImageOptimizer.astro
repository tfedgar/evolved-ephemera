---
interface Props {
  src: string;
  alt: string;
  displayWidth: number;
  displayHeight: number;
  class?: string;
  loading?: "lazy" | "eager";
  decoding?: "async" | "sync" | "auto";
}

const {
  src,
  alt,
  displayWidth,
  displayHeight,
  class: className,
  loading = "lazy",
  decoding = "async"
} = Astro.props;

// Calculate srcset sizes based on display dimensions
const sizes = [
  Math.round(displayWidth * 0.5),  // 0.5x
  displayWidth,                     // 1x
  Math.round(displayWidth * 1.5),  // 1.5x for retina
  Math.round(displayWidth * 2)     // 2x for high-DPI
].filter((size, index, self) => 
  size > 0 && size <= 1920 && self.indexOf(size) === index
).sort((a, b) => a - b);

const getOptimizedPath = (path: string, size: number, format: string) => {
  const extension = path.split('.').pop();
  const basePath = path.slice(0, -(extension?.length || 0) - 1);
  return `${basePath}-${size}.${format}`;
};

const srcset = sizes
  .map(size => `${getOptimizedPath(src, size, 'webp')} ${size}w`)
  .join(', ');

const fallbackSrcset = sizes
  .map(size => `${getOptimizedPath(src, size, 'jpg')} ${size}w`)
  .join(', ');
---

<picture>
  <source
    type="image/webp"
    srcset={srcset}
    sizes={`${displayWidth}px`}
  />
  <source
    type="image/jpeg"
    srcset={fallbackSrcset}
    sizes={`${displayWidth}px`}
  />
  <img
    src={getOptimizedPath(src, displayWidth, 'jpg')}
    alt={alt}
    width={displayWidth}
    height={displayHeight}
    class={className}
    loading={loading}
    decoding={decoding}
    style={`aspect-ratio: ${displayWidth}/${displayHeight};`}
  />
</picture>

<style>
img {
  max-width: 100%;
  height: auto;
  display: block;
  object-fit: cover;
}
</style> 
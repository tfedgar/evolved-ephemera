---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';

// Get URL parameters
const url = new URL(Astro.request.url);
const sessionId = url.searchParams.get('session_id');

// Verify this is a valid Stripe session (server-side verification)
let isValidSession = false;
let customerEmail = '';
let verificationError = '';

if (sessionId) {
  try {
    // Access environment variables - try different methods
    let stripeSecretKey;
    
    // Try Astro.locals.runtime first (for Cloudflare)
    if ((Astro.locals as any).runtime && 'env' in (Astro.locals as any).runtime) {
      const { env } = (Astro.locals as any).runtime;
      stripeSecretKey = env.STRIPE_SECRET_KEY;
    }
    
    // Fallback to import.meta.env
    if (!stripeSecretKey) {
      stripeSecretKey = import.meta.env.STRIPE_SECRET_KEY;
    }
    
    if (!stripeSecretKey) {
      console.error('STRIPE_SECRET_KEY environment variable is not set');
      verificationError = 'Configuration error: Stripe API key not found';
    } else {
      // Import Stripe for server-side verification
      const Stripe = (await import('stripe')).default;
      const stripe = new Stripe(stripeSecretKey, {
        apiVersion: '2023-10-16' as any,
      });
      
      // Verify the session with Stripe
      const session = await stripe.checkout.sessions.retrieve(sessionId);
      
      // Check if payment was successful and it's a PDF purchase
      isValidSession = session.payment_status === 'paid' && 
                      session.metadata?.product_type === 'pdf';
      customerEmail = session.customer_details?.email || '';
      
      console.log('Session verification:', {
        sessionId: sessionId,
        paymentStatus: session.payment_status,
        productType: session.metadata?.product_type,
        isValid: isValidSession,
        customerEmail: customerEmail
      });
    }
    
  } catch (error: any) {
    console.error('Session verification failed:', error);
    verificationError = error.message || 'Failed to verify session';
    isValidSession = false;
  }
}
---

<Layout 
  title="Download Your PDF - Feed the Fame"
  description="Download your purchased Feed the Fame PDF guide"
>
  <script define:vars={{customerEmail}}>
    // Pass server-side data to client-side
    document.body.setAttribute('data-customer-email', customerEmail);
  </script>
  <Navigation />
  
  <section class="pt-24 pb-16 lg:pt-28 lg:pb-20 bg-slate-50 min-h-screen">
    <div class="max-w-4xl mx-auto px-4 lg:px-6">
      <div class="mb-12">
        <a href="/" class="inline-flex items-center gap-2 mb-8 px-6 py-3 text-slate-900 no-underline font-medium text-base border-2 border-slate-900 transition-all duration-200 hover:bg-slate-900 hover:text-white group relative overflow-hidden">
          <span class="relative z-10 text-slate-900 group-hover:text-white">← Return Home</span>
          <div class="absolute inset-0 bg-gradient-to-r from-emerald-600 to-emerald-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        </a>
        
        <div class="bg-green-50 border border-green-200 rounded-xl p-4 mb-6 text-center">
          <div>
            <div class="flex items-center justify-center">
              <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <h1 class="text-xl font-bold text-gray-900 !mt-2">
              Payment Complete
            </h1>
          </div>
        </div>
      </div>
      
      <div class="bg-white rounded-2xl p-8 lg:p-10 shadow-lg border border-gray-200">
        <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">
          Download Your PDF
        </h2>
        
        <div class="text-center mb-6">
          <div class="bg-slate-50 border border-slate-200 rounded-xl p-4 mb-4">
            <h3 class="text-lg font-semibold text-slate-900 mb-2">Feed the Fame</h3>
            <div class="text-sm text-slate-600 space-y-1">
              <p>✓ 44-page comprehensive guide</p>
              <p>✓ Instant digital download</p>
            </div>
          </div>
        </div>
        
      {isValidSession ? (
        <div id="download-section" class="text-center">
          <div id="loading" class="mb-6">
            <div class="flex items-center justify-center gap-3 text-slate-600 mb-4">
              <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-slate-600"></div>
              <span>Preparing your download...</span>
            </div>
          </div>
          
          <div id="success" class="hidden">
            <a 
              id="final-download-btn"
              href="#"
              class="inline-flex items-center justify-center gap-2 px-8 py-4 relative bg-gradient-to-r from-slate-900 to-slate-800 text-white border border-slate-700 font-bold hover:border-slate-500 transition-all duration-300 text-lg capitalize mb-6"
            >
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span class="text-white font-bold">Download PDF</span>
            </a>
            
            <div class="text-sm text-slate-600 space-y-2">
              <p>Your download will begin automatically.</p>
              <p>Save the PDF to your device for offline access anytime.</p>
            </div>
          </div>
          
          <div id="error" class="hidden">
            <div class="bg-red-50 border border-red-200 rounded-xl p-6 mb-6">
              <div class="flex items-center justify-center mb-4">
                <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 class="text-lg font-semibold text-red-800 mb-2">Download Error</h3>
              <p id="error-message" class="text-red-700 mb-4"></p>
              <button 
                id="retry-btn"
                class="inline-flex items-center justify-center gap-2 px-6 py-3 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Try Again
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div class="text-center">
          <div class="bg-red-50 border border-red-200 rounded-xl p-6 mb-6">
            <div class="flex items-center justify-center mb-4">
              <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-red-800 mb-2">Invalid Access</h3>
            <p class="text-red-700 mb-4">
              {verificationError || 'This download link is invalid or has expired.'}
            </p>
            <a 
              href="/" 
              class="inline-flex items-center justify-center gap-2 px-6 py-3 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700 transition-colors"
            >
              Return Home
            </a>
          </div>
          
          <div class="text-sm text-slate-600 space-y-2">
            <p>Save the PDF to your device for offline access anytime.</p>
          </div>
        </div>
      )}
      
      <div class="text-center mt-8 pt-8 border-t border-gray-200">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Need Help?</h3>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="mailto:support@coachedgar.com" 
            class="inline-flex items-center justify-center gap-2 px-6 py-3 relative bg-gradient-to-r from-slate-900 to-slate-800 text-white border border-slate-700 font-bold hover:border-slate-500 transition-all duration-300 text-sm capitalize"
          >
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
            <span class="text-white font-bold">Email Support</span>
          </a>
          
          <a 
            href="/#contact" 
            class="inline-flex items-center justify-center gap-2 px-6 py-3 relative bg-gradient-to-r from-slate-900 to-slate-800 text-white border border-slate-700 font-bold hover:border-slate-500 transition-all duration-300 text-sm capitalize"
          >
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 9 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            <span class="text-white font-bold">Contact Form</span>
          </a>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const loading = document.getElementById('loading') as HTMLDivElement;
    const success = document.getElementById('success') as HTMLDivElement;
    const error = document.getElementById('error') as HTMLDivElement;
    const finalDownloadBtn = document.getElementById('final-download-btn') as HTMLAnchorElement;
    const retryBtn = document.getElementById('retry-btn') as HTMLButtonElement;
    const errorMessage = document.getElementById('error-message') as HTMLParagraphElement;
    
    if (!loading || !success || !error || !finalDownloadBtn) return;
    
    // Auto-generate download link on page load
    generateDownloadLink();
    
    async function generateDownloadLink() {
      try {
        // Show loading state
        showLoading();
        
        // Get session ID and customer email from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const sessionId = urlParams.get('session_id');
        // Customer email is passed from server to client via data attribute
        const serverCustomerEmail = document.body.dataset.customerEmail || '';
        
        if (!sessionId || !serverCustomerEmail) {
          throw new Error('Missing session information');
        }
        
        // Call server-side API to generate secure download token
        const formData = new FormData();
        formData.append('sessionId', sessionId);
        formData.append('customerEmail', serverCustomerEmail);
        
        const response = await fetch('/api/download-pdf', {
          method: 'POST',
          body: formData
        });
        
        let data;
        try {
          data = await response.json();
        } catch (jsonError) {
          console.error('Failed to parse JSON response:', jsonError);
          throw new Error('Server returned invalid response. Please try again.');
        }
        
        if (!response.ok) {
          throw new Error(data?.error || `Server error: ${response.status} ${response.statusText}`);
        }
        
        // Set the secure download URL
        finalDownloadBtn.href = data.downloadUrl;
        showSuccess();
        
      } catch (err: any) {
        console.error('Download error:', err);
        showError(err.message || 'An unexpected error occurred');
      }
    }
    
    if (retryBtn) {
      retryBtn.addEventListener('click', function() {
        generateDownloadLink();
      });
    }
    
    function showLoading() {
      loading.classList.remove('hidden');
      success.classList.add('hidden');
      error.classList.add('hidden');
    }
    
    function showSuccess() {
      loading.classList.add('hidden');
      success.classList.remove('hidden');
      error.classList.add('hidden');
    }
    
    function showError(message: string) {
      loading.classList.add('hidden');
      success.classList.add('hidden');
      error.classList.remove('hidden');
      if (errorMessage) {
        errorMessage.textContent = message;
      }
    }
  });
</script>
